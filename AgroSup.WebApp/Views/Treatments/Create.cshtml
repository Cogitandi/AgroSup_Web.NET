@model IList<AgroSup.WebApp.ViewModels.Manages.Treatments.AddTreatmentViewModel>
@using AgroSup.WebApp.ViewModels.Manages.Treatments;
@{
    ViewData["Title"] = "Dodaj zabiegi";
    ViewData["Header"] = "Utwórz pole";
    ViewData["ActivePage"] = ManageMenu.TreatmentAdd;
    var treatmentModel = new AddTreatmentViewModel();
    var fertilizerTreatmentId = AddTreatmentViewModel.FertilizingTreatmentID;
}

<div class="row">
    <partial name="_ManageMenuPartial" />
    <div class="col-md-10">
        <div class="container-md mx-4">
            <h2 class="text-center">Zabiegi</h2>
            <hr />
            <!--- Content -->
            <form asp-action="Create" id="form">
                <div asp-validation-summary="All" class="text-danger"></div>
                <input class="btn btn-info mb-2" type="button" id="addTreatment" value="Nowy zabieg" />
                <table class="table">
                    <thead>
                        <tr>
                            <th>
                                @Html.DisplayNameFor(model => treatmentModel.TreatmentKindId)
                            </th>
                            <th>
                                @Html.DisplayNameFor(model => treatmentModel.Date)
                            </th>
                            <th>
                                @Html.DisplayNameFor(model => treatmentModel.FieldId)
                            </th>
                            <th>
                                @Html.DisplayNameFor(model => treatmentModel.Notes)
                            </th>
                            <th>
                                @Html.DisplayNameFor(model => treatmentModel.DosePerHa)
                            </th>
                            <th>
                                @Html.DisplayNameFor(model => treatmentModel.SprayingAgents)
                            </th>
                            <th>
                                @Html.DisplayNameFor(model => treatmentModel.FertilizerId)
                            </th>
                            <th>
                                @Html.DisplayNameFor(model => treatmentModel.ReasonForUse)
                            </th>
                            <th></th>
                        </tr>
                    </thead>
                    <tbody id="treatments">
                        @if (Model != null)
                        {
                            @for (int i = 0; i < Model.Count; i++)
                            {
                                @Html.EditorFor(model => model[i])
                            }
                        }

                    </tbody>
                </table>
                <div class="form-group">
                    <input type="submit" value="Dodaj zabiegi" class="btn btn-primary" />
                </div>
            </form>
            <!--- End content -->
        </div>
    </div>
</div>

@section Scripts {
    @*await Html.RenderPartialAsync("_ValidationScriptsPartial");}*@
<script>
        $(function () {
            var nameInputs = $("#treatments").find('select[name$=TreatmentKindId]');
            nameInputs.each(function () {
                showHideInputs.call(this);
            })
            markValidationError()
        });
        function markValidationError() {
            var fields = $(".field-validation-error");
            fields.each(function () {
                if (this.val != "") {
                    var inputField = $(this).prev();
                    inputField.addClass('is-invalid');
                }
            });
        }
        function showHideInputs() {
            var value = $(this).val();
            var inputs = $(this).parent().parent().siblings();
            switch (value) {
                case '@AddTreatmentViewModel.FertilizingTreatmentID':
                    inputs.find('input[name$=Date]').prop("disabled", false);
                    inputs.find('select[name$=FieldId]').prop("disabled", false);
                    inputs.find('input[name$=DosePerHa]').prop("disabled", false);
                    inputs.find('input[name$=Notes]').prop("disabled", false);
                    inputs.find('input[name$=Agents]').prop("disabled", true);
                    inputs.find('select[name$=FertilizerId]').prop("disabled", false);
                    inputs.find('input[name$=ReasonForUse]').prop("disabled", true);
                    break;
                case '@AddTreatmentViewModel.SeedingTreatmentID':
                   inputs.find('input[name$=Date]').prop("disabled", false);
                    inputs.find('select[name$=FieldId]').prop("disabled", false);
                    inputs.find('input[name$=DosePerHa]').prop("disabled", false);
                    inputs.find('input[name$=Notes]').prop("disabled", false);
                   inputs.find('input[name$=Agents]').prop("disabled", true);
                    inputs.find('select[name$=FertilizerId]').prop("disabled", true);
                    inputs.find('input[name$=ReasonForUse]').prop("disabled", true);
                    break;
                case '@AddTreatmentViewModel.SprayingTreatmentID':
                   inputs.find('input[name$=Date]').prop("disabled", false);
                    inputs.find('select[name$=FieldId]').prop("disabled", false);
                    inputs.find('input[name$=DosePerHa]').prop("disabled", true);
                    inputs.find('input[name$=Notes]').prop("disabled", false);
                   inputs.find('input[name$=Agents]').prop("disabled", false);
                    inputs.find('select[name$=FertilizerId]').prop("disabled", true);
                    inputs.find('input[name$=ReasonForUse]').prop("disabled", false);
                    break;
                default:
                   inputs.find('input[name$=Date]').prop("disabled", true);
                    inputs.find('select[name$=FieldId]').prop("disabled", true);
                    inputs.find('input[name$=DosePerHa]').prop("disabled", true);
                    inputs.find('input[name$=Notes]').prop("disabled", true);
                   inputs.find('input[name$=Agents]').prop("disabled", true);
                    inputs.find('select[name$=FertilizerId]').prop("disabled", true);
                    inputs.find('input[name$=ReasonForUse]').prop("disabled", true);
                    break;
            }
        }
        ///
        $("#addTreatment").on("click", function () {
        $.ajax({
            async: true,
            data: $("#form").serialize(),
            type: "POST",
            url: '@Url.Action("AddTreatment", "Treatments")',
            success: function (partialView) {
                $('#treatments').html(partialView);
                $('#treatments').find('select[name$=TreatmentKindId]').each(function () {
                    showHideInputs.call(this)
                });
            }
        });
        });

        function removeParcel() {
            var indexToRemove = $(this).parent().parent().parent().prevAll().length;
            //var data
            $.ajax({
                async: true,
                data: $("#form").serialize() + "&__index=" + indexToRemove,
            type: "POST",
            url: '@Url.Action("RemoveTreatment", "Treatments")',
                success: function (partialView) {
                    $('#treatments').html(partialView);
                    $('#treatments').find('select[name$=TreatmentKindId]').each(function () {
                        showHideInputs.call(this)
                    });
            }
        });
            event.preventDefault();
        }
</script>
}